@include('layouts.sidebar')  //include and layout always based upon public path not on relative path
@extends('layouts.master')

//for fixing indentation in phpstrom
=====================
ctrl alt I
for adding route name
===============================
route('name')
Route::get('/', function)->name('routeName')

to create a new record
=====================================
$post = new Post();
$post->title = request('title');
$post->body = request('body');
$post->save()
or
$this->validate(request(),
    'title' => 'required|min:3'
)
Post::create([
    'title' => request('title'),
    'body' => request('body')
])

//error in blade
==================================
$errors->all()

//route model binding
=======================================
Route::get('posts/{post}', 'PostsController@show');
public function show(Post $post) { //$post exactly like wild card
    return view('posts.show', compact('post'));
}

//to add a new record something inside model through relationship
=======================================================
$this->comments()->create(compact('body'));
$this->comments()->create(['body' => $body]);
$this->posts->save($post) //here $post is instance of Post Model
    //difference between create and post
     create need array of data. save require instance of Model

to login the user after registration
==================================================
$user = User::create(request(['name', 'email', 'password'));
auth()->login($user)
to login from login from
====================
Auth::attempt([ 'email' => $email, 'password' => $password]))
Auth::attempt(request(['email', 'password'))

//to get id of authenticate user
=====================================
auth()->user()->id
auth()->id()

a complex raw sql for archive
=========================================
//raw
(SELECT year(created_at) as year,
monthname (created_at) as month,
COUNT(*) publications
FROM posts
group by year, month)
$post = App\Post::selectRaw('year(created_at) as year, monthname(created_at) as month, count(*) as published')->groupBy('year', 'month')
    ->get()->toArray();

scopeQuery
=================================
//inside model
public function scopeFilter($query, $filters) {
    if ($year = $filters['year']) {
        $query->whereYear('created_at', Carbon::parse($year)->year);
    }
}
//inside controller
$posts = Post::latest()
    ->filter(request(['month', 'year']))
    ->get();

===============================================
//manage windows credential:
it takes huge time to find out
how to change github credential in windows
finally found windows has such setting call
manage windows credential
===============================================

//View composer
==============================================
//php static function for archive
public static function archive() {
    return static::selectRaw('year(created_at) as year, monthname(created_at) as month, count(*) as published')
            ->groupBy('year', 'month')
            ->get()
            ->toArray();
}
view()->composer('layouts.master', function($view) {
    $view->with('archives', \App\Post::archive());
});

//factory
===============================
factory(\App\User::class, 10)->create();
factory(\App\User::class, 10)->make(); //still don't know the usages

//app service provider
==================================================
//for binding
\App::bind() || \App::singleton('') || $this->app->bind()
    //example
$this->app->singleton('redis', function ($app) {
    $config = $app->make('config')->get('database.redis');

    return new RedisManager(Arr::pull($config, 'client', 'predis'), $config);
});

//for resolving
resolve('redis') || app('redis') || \App::make('redis');

php artisan make:provider SocialMediaProvider

update String ClassPath
==============================================
'\App\Billing\Stripe' || Stripe::class

mail
=======================================
sending mail
\Mail::to($user)->send(new Welcome($user))
//making a mailClass Welcome
php artisan make:mail Welcome
(inside welcome public $user will be automatic injected inside blade file.)

mailwithmarkdown
=========================================
php aritsan make:mail WelcomeAgain --markdown="emails.welcome-again"
//to add or edit theme style
php artisan vendor:publish --tag=laravel-mail
add a new css file name
change theme name as css file name inside config/mail > markdown > theme

formRequest
========================================
request([]) || request()->only([]) || inside formrequest $this->only([])
normally we should use dedicated formRequest when we have bigger and complex form to make controller look clean
when we type hint RequestClass in store method it will first check validation rules then proceed to the next;

pivot table, egar loading, attach(), detach()
==========================================================
//schema
Schema::create('tags', function (Blueprint $table) {
    $table->increments('id');
    $table->string('name')->unique();
    $table->timestamps();
});
//pivot table
    Schema::create('post_tag', function (Blueprint $table) {
        $table->integer('post_id');
        $table->integer('tag_id');
        $table->primary(['post_id', 'tag_id']); //so row won't duplicate
    });
//relationship inside post model
    public function posts() {
        return $this->belongsToMany(Post::class);
    }
//relationship inside tag model
    public function tags() {
        return $this->belongsToMany(Tag::class);
    }
//inside tinker
$post->tags
$tags->post
//egar loading
$post->with('tags')->get()
//attach detach
$post->tags()->attach($tag_id || $tag_model)
$tag->posts()->attach($post_id || $$post_model)

getRouteKeyName, has('method_name')
===============================================
//making explicit routeKeyName instead of id
//inside model
public function getRouteKeyname () {
    return 'name';
}
//appServiceProvider
$view->with('tags', \App\Tag::has('posts')->pluck('name'));

















